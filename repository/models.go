// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package repository

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type JoinRequestStatus string

const (
	JoinRequestStatusPending   JoinRequestStatus = "pending"
	JoinRequestStatusAccepted  JoinRequestStatus = "accepted"
	JoinRequestStatusCancelled JoinRequestStatus = "cancelled"
	JoinRequestStatusDenied    JoinRequestStatus = "denied"
	JoinRequestStatusBlocked   JoinRequestStatus = "blocked"
)

func (e *JoinRequestStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = JoinRequestStatus(s)
	case string:
		*e = JoinRequestStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for JoinRequestStatus: %T", src)
	}
	return nil
}

type NullJoinRequestStatus struct {
	JoinRequestStatus JoinRequestStatus
	Valid             bool // Valid is true if JoinRequestStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullJoinRequestStatus) Scan(value interface{}) error {
	if value == nil {
		ns.JoinRequestStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.JoinRequestStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullJoinRequestStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.JoinRequestStatus), nil
}

type MemberRole string

const (
	MemberRoleCreator    MemberRole = "creator"
	MemberRoleAdmin      MemberRole = "admin"
	MemberRoleNormalUser MemberRole = "normal_user"
)

func (e *MemberRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MemberRole(s)
	case string:
		*e = MemberRole(s)
	default:
		return fmt.Errorf("unsupported scan type for MemberRole: %T", src)
	}
	return nil
}

type NullMemberRole struct {
	MemberRole MemberRole
	Valid      bool // Valid is true if MemberRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMemberRole) Scan(value interface{}) error {
	if value == nil {
		ns.MemberRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MemberRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMemberRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MemberRole), nil
}

type Category struct {
	ID        uuid.UUID
	Category  pgtype.Text
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	DeletedAt pgtype.Timestamp
}

type Event struct {
	ID          uuid.UUID
	Title       pgtype.Text
	Description pgtype.Text
	// Description about the place or reference to the place
	Place          pgtype.Text
	Coordinates    pgtype.Point
	StartsAt       pgtype.Timestamp
	EndsAt         pgtype.Timestamp
	Capacity       pgtype.Int4
	UserCreatorID  uuid.UUID
	GroupCreatorID pgtype.UUID
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
	DeletedAt      pgtype.Timestamp
}

type Group struct {
	ID          uuid.UUID
	Name        string
	Description pgtype.Text
	ProfilePic  []byte
	IsVerified  bool
	IsOpen      bool
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
	DeletedAt   pgtype.Timestamp
}

type GroupCategory struct {
	GroupID    uuid.UUID
	InterestID uuid.UUID
}

type JoinRequest struct {
	UserID            uuid.UUID
	GroupID           uuid.UUID
	MesssageFromUser  pgtype.Text
	MesssageFromAdmin pgtype.Text
	Status            NullJoinRequestStatus
	CreatedAt         pgtype.Timestamp
	UpdatedAt         pgtype.Timestamp
	DeletedAt         pgtype.Timestamp
}

type Member struct {
	ID      uuid.UUID
	Role    MemberRole
	GroupID uuid.UUID
	UserID  uuid.UUID
}

type Participant struct {
	UserID  uuid.UUID
	EventID uuid.UUID
}

type User struct {
	ID         uuid.UUID
	Name       string
	ProfilePic pgtype.Text
}

type UserInterest struct {
	UserID     uuid.UUID
	InterestID uuid.UUID
}
